plugins {
    id 'com.android.application'
    id "com.github.spacialcircumstances.gradle-cucumber-reporting" version "0.1.24"
}

boolean hasSigningInfo = System.getenv("SIGNING_KEYSTORE") != null && System.getenv("KEYSOTRE_PASSWORD")

String version = "0.0.0"

if (project.hasProperty('projVersion')) {
    version = project.projVersion
}

def getInstrumentation() {
    project.hasProperty('cucumber') ?
            "" :
            'androidx.test.runner.AndroidJUnitRunner'
}

def getTestTags() {
    project.getProperties().get('tags') ?: ''
}

def getTestScenario() {
    project.getProperties().get('scenario') ?: ''
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    testOptions {
        unitTests.returnDefaultValues = true
        animationsDisabled true
//        uncomment this to run tests with orchestrator
//        execution 'ANDROIDX_TEST_ORCHESTRATOR'
    }

    packagingOptions {
        exclude("META-INF/INDEX.LIST")
        exclude("META-INF/DEPENDENCIES")
        exclude("META-INF/groovy-release-info.properties")
        exclude("META-INF/LICENSE.md")
        exclude("META-INF/NOTICE.md")
    }

    if (project.hasProperty('testVariant')) {
        testBuildType project.testVariant
    } else {
        testBuildType 'developTest'
    }
    int versionCodeString = (project.hasProperty("versionCode")) ? project.versionCode : 3
    defaultConfig {
        applicationId "com.zevrant.services.zevrantandroidapp"
        testApplicationId "com.zevrant.services.zevrantandroidapp.test"
        manifestPlaceholders = [appAuthRedirectScheme: 'com.zevrant.services.zevrantandroidapp']
        minSdkVersion 28
        targetSdkVersion 30
        versionCode versionCodeString
        versionName version

        buildConfigField 'String', 'TEST_TAGS', '"' + getTestTags() + '"'
        buildConfigField 'String', 'TEST_SCENARIO', '"' + getTestScenario() + '"'

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

//        testInstrumentationRunner "com.zevrant.services.zevrantandroidapp.CucumberTestRunner"
    }

    signingConfigs {
        release {
            // You need to specify either an absolute path or include the
            // keystore file in the same directory as the build.gradle file.
            storeFile file('REPLACE_ME')
            storePassword 'PASSWORD'
            keyPassword ""
            keyAlias "key0"
        }
    }

    buildTypes {
        local {
            initWith(buildTypes.debug)
            applicationIdSuffix ".local"
            minifyEnabled false
            signingConfig debug.signingConfig
            debuggable true
        }


        develop {
            applicationIdSuffix ".develop"
            minifyEnabled false
            signingConfig debug.signingConfig
            debuggable true

        }

        developTest {
            applicationIdSuffix ".developTest"
            minifyEnabled false
            signingConfig debug.signingConfig
            debuggable true
        }

        release {
            signingConfig release.signingConfig

            minifyEnabled false
            debuggable = false
        }

    }


    flavorDimensions "version"

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    testImplementation 'junit:junit:4.12'
    String espressoVersion = '3.4.0'
    String workVersion = '2.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    def nav_version = "2.3.5"
    implementation 'com.zevrant.services:zevrant-universal-common:3'
    implementation 'commons-codec:commons-codec:1.15'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation "androidx.work:work-runtime:$workVersion"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'com.android.volley:volley:1.2.1'
    implementation('com.fasterxml.jackson.core:jackson-databind:2.12.5') { transitive = true }
    implementation "androidx.navigation:navigation-fragment:$nav_version"
    implementation "androidx.navigation:navigation-ui:$nav_version"
    implementation "ch.acra:acra-http:5.7.0"
    implementation 'org.bouncycastle:bcprov-jdk16:1.46'
    implementation 'net.openid:appauth:0.10.0'

    testImplementation 'org.mockito:mockito-core:3.9.0'

    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation ("androidx.test.espresso:espresso-core:$espressoVersion")
    androidTestImplementation "androidx.test.espresso:espresso-web:$espressoVersion"
    androidTestImplementation "com.android.support.test.espresso:espresso-intents:$espressoVersion"
    androidTestImplementation 'androidx.test:core:1.4.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
    androidTestImplementation 'com.android.support.test.uiautomator:uiautomator-v18:2.1.3'
    androidTestImplementation "androidx.work:work-testing:$workVersion"

    androidTestUtil 'androidx.test:orchestrator:1.4.0'
}

task pullReport(type: Exec) {
    workingDir("$rootDir")
    String adbCommand = System.getenv("ADB_COMMAND") ?: "adb"
    executable(adbCommand)
    args("-a", "pull", "/sdcard/Documents/cucumber-reports")
}

task clearTags(type: Exec) {
    workingDir("$rootDir/app")
    executable("sed")
    args("-i", "s/tags = \".*\"/tags = \"\"/g", "src/androidTest/java/com/zevrant/services/zevrantandroidapp/test/CucumberTestCase.java")
}

task cleanRemoteReport(type: Exec) {
    workingDir("$rootDir")
    String adbCommand = System.getenv("ADB_COMMAND") ?: "adb"
    executable(adbCommand)
    args("shell", "rm -rf", "/sdcard/Documents/cucumber-reports/*")
    ignoreExitValue true
    setIgnoreExitValue(true)
    finalizedBy(tasks.clearTags)
}

task setTags(type: Exec) {
    workingDir("$rootDir/app")
    executable("sed")
    String tagListString = ""
    if (project.hasProperty("tags")) {
        String[] tagsArray = project.tags.split(",")
        for (String tag : tagsArray) {
            tagListString = tagListString.concat(tag).concat(",")
        }
        tagListString = tagListString.substring(0, tagListString.length() - 1).trim()
    }
    args("-i", "s/tags = \".*\"/tags = \"$tagListString\"/g", "src/androidTest/java/com/zevrant/services/zevrantandroidapp/test/CucumberTestCase.java")
}